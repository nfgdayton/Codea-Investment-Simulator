mainScreen = class()

function mainScreen:init(x)
    self:init_my_things()
end

function mainScreen:init_my_things()
-- init constants
   gsWhite=color(0, 0, 0, 255)
   gsBlack=color(255,255,255,255)
   gsGreen=color(62, 92, 51, 238)
   gsRed=color(255, 0, 2, 255)
   gsBlue=color(0, 14, 255, 170)
   
-- init helper objects
   gsInitHelperObjects()
   
-- controls for the game: go, reset
   self:gsInitControls()

-- boxes is an array of box objects that display status of each fund
-- TODO: Put button init in seperate function 
    boxes={} 
-- Boxes hold fund information
    boxes[funds[GREEN]]=Box(100, 100, 200, 200, "GREEN",""," ") 
    boxes[funds[RED]]=Box(300, 100, 400, 200, "RED",""," ")	
	boxes[funds[BLUE]]=Box(500, 100, 600, 200, "BLUE",""," ")
-- Buttons redirect percentage of fund to different color fund
    grnFundToRd=squareButton("grnFundToRd",{225,160},{40,40},gsBlack,gsRed,3)
    grnFundToRd.action=function() self.grnFundToRdHandler() end
    grnFundToBl=squareButton("grnFundToBl",{225,100},{40,40},gsBlack,gsBlue,3)
    grnFundToBl.action=function() self.grnFundToBlHandler() end
    rdFundToGrn=squareButton("rdFundToGrn",{425,160},{40,40},gsBlack,gsGreen,4)
    rdFundToGrn.action=function() self.rdFundToGrnHandler() end
    rdFundToBl=squareButton("rdFundToBl",{425,100},{40,40},gsBlack,gsBlue,3)
    rdFundToBl.action=function() self.rdFundToBlHandler() end
    blFundToGrn=squareButton("rdFundToGrn",{625,160},{40,40},gsBlack,gsGreen,4)
    blFundToGrn.action=function() self.blFundToGrnHandler() end
    blFundToRd=squareButton("rdFundToRd",{625,100},{40,40},gsBlack,gsRed,4)
    blFundToRd.action=function() self.blFundToRdHandler() end   
end


-- Activating prints in draw really slows down performance.
function mainScreen:draw()
-- Codea does not automatically call this method
--  set background color to yellow
    background(255, 220, 0, 94)
    self:draw_controls()
    self:draw_text()
    self:iterate_boxes()
end

function mainScreen:touched(touch)
-- Codea does not automatically call this method
    if goButton:touched(touch) == true then
	    return true
	elseif resetButton:touched(touch) == true then
	    return true
	else
--  Fund transfer button touches handled here
        grnFundToRd:touched(touch)
		grnFundToBl:touched(touch)
		rdFundToGrn:touched(touch)
		rdFundToBl:touched(touch)
		blFundToGrn:touched(touch)
		blFundToRd:touched(touch)
	end
	return FALSE
end

function mainScreen:draw_controls()
-- Set Colors of control Buttons
   textcolor = gsWhite
   backcolor = gsWhite
-- Draw Control buttons  
   goButton:draw(textcolor,backcolor)
   resetButton:draw(textcolor,backcolor)
end

function mainScreen:draw_text()
    pushStyle()
    font ("Georgia")
    textcolor = gsWhite  
    fill (textcolor)
    fontSize(20)
    textWrapWidth(300)
    textMode(CORNER)
-- show total investment amount and turn
    text("Current Amt: " .. amt,100,660)
    text("Turn #: " .. turnCtr,100,635)
	
-- show amounts allocated to each fund if change allocation this changes in column1 (2nd number of text)
    text("Green Allocation: " .. green_amt(),100,610) 
    text("Red Allocation: " .. red_amt(),100,585)
    text("Blue Allocation: " .. blue_amt(), 100, 560)

    if turnCtr < 20 then -- show percents of return in column2 (2nd number of text) at 20 no new_amt_table
-- Green Return     
        return_pcnt=(new_amt_table[GREEN]/amt_table[GREEN]) 
        percent_formatter:set(return_pcnt * 100)
        text("Return: " .. percent_formatter:get() .."%", 400,610)
-- Red Return 
        return_pcnt= new_amt_table[RED]/amt_table[RED]
        percent_formatter:set(return_pcnt * 100)	
        text("Return: " .. percent_formatter:get() .. "%", 400,585)
-- Blue Return
        return_pcnt=new_amt_table[BLUE] / amt_table[BLUE]
        percent_formatter:set(return_pcnt*100)		
        text("Return: " .. percent_formatter:get() .. "%", 400,560)
    end
    popStyle()
end 

--function mainScreen:changeScreen()
--    print("ChangeScreen")
--   currScreen="NewScreen"
--end

-- ============================================================================================================================
-- iterate_boxes
-- called from draw to paint boxes displaying fund amounts
-- loop by funds[index] and call draw method on each object in boxes[funds[index]]
-- =============================================================================================================================
function mainScreen:iterate_boxes()

 for i=1,#funds do
    if boxes[funds[i]]~= nil then
--     set color of interior of box	
--      ideally would have an array of colors indexed by GREEN, RED, BLUE set up in Constants 
       if i == GREEN then
            scolor=gsGreen
			boxes[funds[GREEN]]:setMid(greenPercentStr)
	        boxes[funds[GREEN]]:setBot(getAmount(GREEN))
			grnFundToRd:draw()
			grnFundToBl:draw()
       elseif i == RED then
            scolor=gsRed
			boxes[funds[RED]]:setMid(redPercentStr)
	        boxes[funds[RED]]:setBot(getAmount(RED)) 
			rdFundToGrn:draw()
			rdFundToBl:draw()
       elseif i == BLUE then
            scolor=gsBlue
			boxes[funds[BLUE]]:setMid(bluePercentStr)
			boxes[funds[BLUE]]:setBot(getAmount(BLUE))
			blFundToGrn:draw()
			blFundToRd:draw()
       end
       boxes[funds[i]]:draw(scolor,scolor)
	end
 end
end

-- Begin Button Handlers
-- to do Wrap these in a seperate class.  invoke methods based on parameter from event handler.
-- E.G.     greenButtonUp.action=function() self.invokeHandler("greenButtonUp") 

--TODO Add global for change tied to radio buttons
--TODO can these functions be paramterized?

function mainScreen:grnFundToRdHandler()
    if GreenP - 5 < 0 then
--      Move RedP remainder of GreenP, less than 5 or 0
        diff=GreenP
        GreenP=0
        RedP=RedP+diff 
    else
        GreenP = GreenP -5
        if RedP + 5 <= 100 then
            RedP = RedP + 5
        else
            print("Red too big")
            movement=100-RedP
            RedP=100
            print ("new RedP" .. RedP)
            BlueP=BlueP+movement
            print ("new BlueP" .. BlueP)
        end
    end
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"	
end

function mainScreen:grnFundToBlHandler()
    if BlueP + 5 > 100 then
        GreenP = 0
        RedP = 0
        BlueP = 100
    else
        BlueP = BlueP +5
        if GreenP - 5 >= 0 then
            GreenP =GreenP - 5
        else
            movement=5-GreenP
            GreenP=0
            RedP=RedP-movement
        end
    end
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
end

function mainScreen:rdFundToGrnHandler()
    if GreenP + 5 > 100 then
        GreenP = 100
        RedP = 0
        BlueP =0
    else
--   increment GreenP	
        GreenP = GreenP +5
--   decrement other funds, red first, then blue if necessary
        if RedP - 5 >= 0 then
            RedP = RedP - 5
        else
            movement=5-RedP
            RedP=0
            BlueP=BlueP-movement
        end
    end
-- reset display strings for buttons
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
end    

function mainScreen:rdFundToBlHandler()
    if BlueP + 5 > 100 then
        GreenP = 0
        RedP = 0
        BlueP = 100
    else
        BlueP = BlueP +5
        if RedP - 5 >= 0 then
            RedP =RedP - 5
        else
            movement=5-RedP
            RedP=0
            GreenP=GreenP-movement
        end
    end
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
end

function mainScreen:blFundToGrnHandler()
    if GreenP + 5 > 100 then
        GreenP = 100
        RedP = 0
        BlueP =0
    else
--   increment GreenP	
        GreenP = GreenP +5
--   decrement other funds, red first, then blue if necessary
        if BlueP - 5 >= 0 then
            BlueP = BlueP - 5
        else
            movement=5-BlueP
            BlueP=0
            RedP=RedP-movement
        end
    end
-- reset display strings for buttons
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
end  

function mainScreen:blFundToRdHandler()
    if RedP + 5 > 100 then
        RedP = 100
        GreenP = 0
        BlueP =0
    else
--   increment GreenP	
        RedP = RedP +5
--   decrement other funds, red first, then blue if necessary
        if BlueP - 5 >= 0 then
            BlueP = BlueP - 5
        else
            movement=5-BlueP
            BlueP=0
            GreenP=GreenP-movement
        end
    end
-- reset display strings for buttons
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
end  

function mainScreen:goButtonHandler()
    if turnCtr > 0 then
         solve=iterate_funcs(debug)
         print_table(solve,debug)
         amt=sum_table(solve)
         turnCtr=turnCtr-1
    end
end

function mainScreen:resetButtonHandler()
   init_globals()
end

function mainScreen:gsInitControls()
-- goButton takes turn
   goButton=GoButton(100,300,200,400,"GO", " ", " ")
   goButton.action=function() self.goButtonHandler() end
-- resetButton starts over
   resetButton=GoButton(400,300,500,400,"START OVER", " ", " ")
   resetButton.action=function() self.resetButtonHandler() end
end

-- ============================================================================================================================
--static functions
--can these be made local?
--wrap in a local global object?
-- ============================================================================================================================
function iterate_funcs(debug)
 --   print("enter iterate_funcs")
    amt_table=alloc_amt()
	-- debug function print's amt_table if 2nd paramter is true
    print_table(amt_table,false)
    soln={}
    for i=1,#funds do
--      iterate through green, red, blue funds
        soln[i]=iterate_func[funds[i]](amt_table[i])
        money_formatter:set(soln[i])
        soln[i]=money_formatter:get()
        if debug == true then
            print ("iterate_func["..i.."] sets boxes[" .. funds[i] .. "] = " .. soln[i])
        end
        boxes[funds[i]]:setBot(soln[i])
    end 
    new_amt_table=soln
    return soln
end
-- ============================================================================================================================
--   print_table
--  debug function that calculates and prints fund percent allocation * new_amt_held
-- ============================================================================================================================
function print_table(table,debug)
--    print("enter print_table")
    if debug==false then
        return
    end
    for i=1, #table do
  --    print ("table[" .. i .. "] = " .. table[i])
        if i == GREEN then
            print("" .. GreenP/100 .. " * " .. amt .. " = " .. amt_table[i])
        elseif i == RED then
            print("" .. RedP/100 .. " * " .. amt .. " ,= " .. amt_table[i])
        elseif i == BLUE then
            print("" .. BlueP/100 .. " * " .. amt .. " = " .. amt_table[i])
        else
                print ("UNDEFINED TABLE ENTRY")
        end
    end
end

-- ============================================================================================================================
-- alloc_amt
-- return table of amounts - rounded to two decimal places - in each fund.
-- create amt_table
-- loop through funds
-- calculate new fund amount based on current funds stored in global variable amt
-- and store the fund amount in amt_table.
-- Call formatter object to round to 2 decimal places
-- ==============================================================================================================================
function alloc_amt()
    amt_table={}
    for i=1, #funds do
--      ideally would have an array of parameters 
        if i == GREEN then
            amt_table[i]=green_amt()
        elseif i == RED then
            amt_table[i]=red_amt()
        elseif i == BLUE then
            amt_table[i]=blue_amt()
        else -- more types of funds than defined parameters
            amt_table[i]=nil
        end
        if amt_table[i]~=nil then
            money_formatter:set(amt_table[i])
            amt_table[i]=money_formatter:get()
        end
    end
    return amt_table
end

function gsInitHelperObjects()
-- Formatter to round off decimals for percents	
    percent_formatter=Formatter(0)	
	new_amt_table={}
    amt_table={}
	debug=false
	iterate_func={}
    iterate_func[funds[GREEN]]=function (amt) return Green:pick(debug)*green_amt() end
    iterate_func[funds[RED]]=function (amt) return Red:pick(debug)*red_amt() end
    iterate_func[funds[BLUE]]=function (amt) return Blue:pick(debug)*blue_amt() end
end

function getAmount(boxType)
   if boxType==GREEN then
	   localAmt=amt*(GreenP/100)
   elseif boxType==RED then
   	   localAmt=amt*(RedP/100)
   elseif boxType==BLUE then
   	   localAmt=amt*(BlueP/100)
   end
   money_formatter:set(localAmt)
   return money_formatter:get() 
end

-- Calculate balances for each account and use money_formatter to round to dollars and cents.
function green_amt()
-- GreenP = percent associated with green fund stored as an integer
   localAmt=amt*GreenP/100    
   money_formatter:set(localAmt)
   return money_formatter:get()
end

function red_amt()
-- RedP = percent associated with red fund stored as an integer
   localAmt=amt*RedP/100    
   money_formatter:set(localAmt)
   return money_formatter:get()        
end

function blue_amt()
-- BlueP = percent associated with blue fund stored as an integer
   localAmt=amt*BlueP/100    
   money_formatter:set(localAmt)
   return money_formatter:get()     
end