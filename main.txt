-- TDDPiece1
-- Simulation of performance of three stock funds.
-- ========================================================================================================
-- Objects 
-- Created setup/init_globals
-- Formatter money_formatter - object initialized to round money amounts to 2 decimal places.
-- Formatter percent_formatter - object founds floats to 0 decimal places
--
-- Created setup/curr
-- Distribution (Green, Red, Blue) - An object containing a table of possible investment returns.  Calling pick randomly yields a possible
-- return.
-- Box(Green,Red,Blue) - graphical object that displays the current allocation of investment fund total allocated to each fund
--
-- Created setup/init_distributions/Distribution/init
-- Di - initialized with a number of sides.  Randomly returns a number between 1 and n.
--
-- Created setup
-- parameter(Go Again) - button that causes 
-- investment amt to be allocated and then a return from each distribution picked, the screen updated, and the global amt is revised.
-- parameters(GreenP, RedP, BlueP) - control percentage of investment funds allocated to each fund (listed in Global Array funds)
-- ==============================================================================================================
-- Functions called by Codea
-- ==============================================================================================================
-- Codea Entry function
-- Use this function to perform your initial setup
-- functions called:
-- init_globals()
-- init_data_structures()
-- ===============================================================================================================================
function setup()
    init_globals()
    init_data_structures()
end
-- ==================================================================================================================
-- Codea draw function
-- This function gets called once every frame
-- objects called:
-- gameScreen 
-- newScreen
-- functions called:
-- draw function of active screen 
-- =================================================================================================================

function draw()
    if currScreen=="GameScreen" then
        gameScreen:draw()
    else
        newScreen:draw()        
    end
end

-- ===========================================================================================================================
-- Codea touched function
-- This function sends the touch event to the game screen.
-- objects called:
-- gameScreen 
-- newScreen
-- functions called:
-- draw function of active screen 
-- ========================================================================================================

function touched(touch)
    if currScreen=="GameScreen" then
        gameScreen:touched(touch) 
    else
        newScreen:touched(touch)   
    end
end

-- ===========================================================================================================================
-- support functions
-- ========================================================================================================
-- init_globals
-- initilize variables used throughout main
-- ================================================================================================================
function init_globals()
-- Initialize constants used in gamescreen.txt  

-- 1) Switch debug mode. true = on, false=off
   debug=false
 
-- 2) fund types and indexes    
    funds={"green","red","blue"}
    GREEN=1
    RED=2
    BLUE=3
	
-- 3) set values for param percents
    GreenP=33
    RedP=33
    BlueP=34
	
    greenPercentStr= GreenP .. "%" 
	redPercentStr= RedP .. "%"	
	bluePercentStr= BlueP .. "%"
	
-- 4) starting money    
    amt=1000
-- 5) turnCtr - number of times to iterate
    turnCtr=20
	
-- 6) Play on gamescreen	
    currScreen="GameScreen"
end

-- =============================================================================================================================
-- init_data_structures
-- initialize objects and tables
-- Formatter
-- Distribution
-- iterate_func table
-- boxes table
-- ============================================================================================================================
function init_data_structures()

    money_formatter=Formatter(2)

    Green=Distribution({.8,.9,1.1,1.1,1.2,1.4})
    Red=Distribution({.05,.2,1,3,3,3})
    Blue=Distribution({.95,1,1,1,1,1.1})

    new_amt_table={}
    amt_table={}

	if debug==true then print("Create mainscreen") end
    gameScreen=mainScreen()
end

-- 
-- ================================================================================================================

-- ============================================================================================================================
-- turn
-- recompute amt for funds.
-- call iterate_funcs to load table solve with
-- call print_table to
-- call sum_table to load amt with
-- =============================================================================================================================
function turn(debug)
  if debug == true then print("enter turn") end
  solve=iterate_funcs(debug)
  print_table(solve,debug)
  amt=sum_table(solve)
  turnCtr=turnCtr-1
  if debug == true then
    print("Current funds is " .. amt)
  end
end



-- ============================================================================================================================
-- sum_table
-- ============================================================================================================================
function sum_table (table)
    sum=0
    for i=1,#table do
        sum=sum+table[i]
    end
    return sum
end

-- ==============================================================================================================================
-- init_parameters - before porting to gameScreen
-- set up buttons and sliders
-- =============================================================================================================================
--function init_parameters()
--    parameter.action("Go Again",go_again)
-- The change routine is called as the parameters are created.
--  Integer parameters did not exhibit atomicity for touch events - would exceed 100% allocation change routines
--  were deleted.  If use parameters will try again to get interaction between events right.
--   parameter.integer('GreenP', 0,100,o_green,change_green)
--   parameter.integer('RedP',   0,100,o_red,  change_red)
--   parameter.integer('BlueP',  0,100,o_blue, change_blue)
--end
-- ============================================================================================================================
-- go_again
-- event handler for button to take turn
-- 
-- ============================================================================================================================
--function go_again()
--    if turnCtr > 0 then
--       turn(false)
--    end
--end